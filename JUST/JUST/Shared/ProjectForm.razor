@using JUST.Data.Models;
@using JUST.Data;
@using System.ComponentModel.DataAnnotations;
@inject IProjectData _db;
@inject NavigationManager NavigationManager;

<div>
    
                
    @if (projectId == null)
    {
        <EditForm class="form" v Model="@project" OnSubmit="@InsertProject">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <span class="subtitle">
                Project Title:    
            </span>
            <InputText class="task-input" id="title" @bind-Value="@project.Title" />
            <span class="subtitle">
                Start Date:    
            </span>
            <InputDate class="task-input" @bind-Value="@project.StartDate"></InputDate>
            <span class="subtitle">
                End Date:    
            </span>
            <InputDate class="task-input" @bind-Value="@project.EndDate"></InputDate>
                
            <button class="submit-button" type="submit"> Submit </button>
        </EditForm>
    }
    else
    {
        <EditForm class="form" v Model="@project" OnSubmit="@EditProject">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <span class="subtitle">
                Project Title:    
            </span>
            <InputText class="task-input" id="title" @bind-Value="@project.Title" />
            <span class="subtitle">
                Start Date:    
            </span>
            <InputDate class="task-input" @bind-Value="@project.StartDate"></InputDate>
            <span class="subtitle">
                End Date:    
            </span>
            <InputDate class="task-input" @bind-Value="@project.EndDate"></InputDate>

            <button class="submit-button" type="submit"> Edit </button>
        </EditForm>
    }
    
</div>

@code {
    [Parameter]
    public string projectId { get; set; }

    private DisplayProject project = new DisplayProject();
    private Project p;
  
    protected override async Task OnInitializedAsync()
    {
        if(projectId != null)
        {
            int id = Convert.ToInt32(projectId);

            var projects = await _db.GetProjects();
            p = projects.Find(p => p.ID == id);

            project.Title = p.Title;
            project.StartDate = p.StartDate;
            project.EndDate = p.EndDate;
        }
    }

    private async Task InsertProject()
    {
        if(project.Title != null)
        {
            Project newProject = new Project() { Title = project.Title };
            await _db.AddProject(newProject);
            project = new DisplayProject();
            NavigationManager.NavigateTo("projects", true);
        }
    }

    private async void EditProject()
    {
        p.Title = project.Title;
        p.StartDate = project.StartDate;
        p.EndDate = project.EndDate;
        await _db.EditProject(p);
        NavigationManager.NavigateTo("projects", true);
    }

    private class DisplayProject
    {
        [MaxLength(20)]
        [MinLength(2)]
        public string? Title { get; set; }

        [Required]
        public DateTime EndDate = DateTime.Now;

        public DateTime StartDate = DateTime.Now;
    }
}
