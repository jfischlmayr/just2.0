@using JUST.Data.Models;
@using JUST.Data;
@using System.ComponentModel.DataAnnotations;
@inject IProjectData _db;
@inject NavigationManager NavigationManager;

	@if (projectId == null)
	{
	 <EditForm class="form" v Model="@project" OnSubmit="@InsertProject">
	  <DataAnnotationsValidator />
	  <ValidationSummary />
	  <div class="title-container">
	   <div class="subtitle" style="margin-left:1.5em;">
		Project Title:
	   </div>
	   <div class="subtitle">
		Start Date:
	   </div>
	   <div class="subtitle">
		End Date:
	   </div>
	   </div>
	   <div class="input-container">
		   <div class="input-field">
		<InputText placeholder="Project Title" class="task-input" id="title" @bind-Value="@project.Title" />
	   </div>

	   <div class="input-field">
		<InputDate placeholder="Start Date" class="task-input" @bind-Value="@project.StartDate"></InputDate>
	   </div>

	   <div class="input-field">
		<InputDate placeholder="End Date" class="task-input" @bind-Value="@project.EndDate"></InputDate>
	   </div>

	   <button class="submit-button" type="submit" style="height: 2.4em; float: right; margin-top:4.5em; margin-right: 3.5em;" title="submit"> Add </button>
		</div>
	   
	  

	  
	 </EditForm>
	}
	else
	{
		<div>

	 <EditForm class="form" Model="@project" OnSubmit="@EditProject">
	  <DataAnnotationsValidator />
	  <ValidationSummary />
	  <div class="title-container">
	   <div class="subtitle" style="margin-left:1.5em;">
		Project Title:
	   </div>
	   <div class="subtitle">
		Start Date:
	   </div>
	   <div class="subtitle">
		End Date:
	   </div>
	   </div>
	  <div class="input-container">
		  <div class="input-field">
		<InputText placeholder="Project Name" class="task-input" id="title" @bind-Value="@project.Title" />
	</div>
	<div class="input-field">
		<InputDate class="task-input" @bind-Value="@project.StartDate"></InputDate>
	</div>
	<div class="input-field">
		<InputDate class="task-input" @bind-Value="@project.EndDate"></InputDate>
	</div>

		  <button class="submit-button" type="submit" style="height: 2.4em; float: right; margin-top: 4.5em; margin-right: 3.5em;" title="submit"> Edit </button>

		  </div>
		  
	  
	 </EditForm>

	 </div>
	}


@code {
	[Parameter]
	public string? projectId { get; set; }

	private DisplayProject project = new DisplayProject();
	private Project p;

	protected override async Task OnInitializedAsync()
	{
		if (projectId != null)
		{
			int id = Convert.ToInt32(projectId);

			var projects = await _db.GetProjects();
			p = projects.Find(p => p.ID == id);

			project.Title = p.Title;
			project.StartDate = p.StartDate;
			project.EndDate = p.EndDate;
		}
	}

	private async Task InsertProject()
	{
		if (project.Title != null)
		{
			Project newProject = new Project() { Title = project.Title, StartDate = project.StartDate, EndDate = project.EndDate };
			await _db.AddProject(newProject);
			project = new DisplayProject();
			NavigationManager.NavigateTo("projects", true);
		}
	}

	private async Task EditProject()
	{
		p.Title = project.Title;
		p.StartDate = project.StartDate;
		p.EndDate = project.EndDate;
		await _db.EditProject(p);
		NavigationManager.NavigateTo("projects", true);
	}

	private class DisplayProject
	{
		[MaxLength(20)]
		[MinLength(2)]
		public string? Title { get; set; }

		[Required]
		public DateTime EndDate = DateTime.Now;

		public DateTime StartDate = DateTime.Now;
	}
}
