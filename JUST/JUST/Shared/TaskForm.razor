@using JUST.Data.Models;
@using JUST.Data;
@using System.ComponentModel.DataAnnotations;
@using Syncfusion.Blazor.DropDowns;

@inject ITasksData _db;
@inject IProjectData _db_p;
@inject NavigationManager NavigationManager;


@if (taskId == null)
{
    <div>
        <EditForm class="form" Model="@task" OnSubmit="@AddTask">
            <DataAnnotationsValidator />
            <ValidationSummary />
         <div class="title-container">
             <div class="subtitle" style="margin-left:1.5em;">
		Task Title:
	   </div>
	   <div class="subtitle">
		Start Date:
	   </div>
	   <div class="subtitle">
		End Date:
	   </div>
         </div>
            <div class="input-container">
                <div class="input-field">
                    <InputText placeholder="Task Name" class="task-input" id="name" @bind-Value="@task.Name"/>
                </div>
                <div class="input-field">
                    <InputDate class="task-input" @bind-Value="@task.StartDate"></InputDate>
                </div>
                <div class="input-field">
                    <InputDate class="task-input" @bind-Value="@task.EndDate"></InputDate>
                </div>

                
            
            
            <button class="submit-button" type="submit" style="height: 2.4em; float: right; margin-top:4.5em; margin-right: 3.5em;"> Submit </button>
            </div>
            
        </EditForm>
        <SfDropDownList Placeholder="Select a Project" TItem="Project" TValue="string" DataSource="@projects" Width="300px" @bind-Value="@projectTitle" >
                <DropDownListFieldSettings Text="Title" Value="ID">
                </DropDownListFieldSettings>
            </SfDropDownList>
    </div>
}
else
{
    <div>
        <EditForm class="form" Model="@task" OnSubmit="@EditTask">
            <DataAnnotationsValidator />
            <ValidationSummary />
         
            <InputText class="task-input" id="name" @bind-Value="@task.Name"/>
            <InputDate class="task-input" @bind-Value="@task.StartDate"></InputDate>
            <InputDate class="task-input" @bind-Value="@task.EndDate"></InputDate>
            <button class="submit-button" type="submit"> Edit </button>
        </EditForm>
    </div>
}




@code {
    [Parameter]
    public string? taskId { get; set; }

    private DisplayTask task = new DisplayTask();
    private JustTask t;
    private List<Project> projects;
    string projectTitle;

    private async Task AddTask()
    {
        JustTask newTask = new JustTask()
        {
            Name = task.Name,
            StartDate = task.StartDate,
            EndDate = task.EndDate
        };

        await _db.AddTask(newTask);
        task = new DisplayTask();
        taskId = null;

        NavigationManager.NavigateTo("tasks", true);
    }

    private async Task EditTask()
    {
        t.Name = task.Name;
        t.StartDate = task.StartDate;
        t.EndDate = task.EndDate;
        t.ProjectID = projects.Find(p => p.Title == projectTitle).ID;

        await _db.EditTask(t);
        task = new DisplayTask();
        taskId = null;

        NavigationManager.NavigateTo("Tasks", true);
    }

    protected override async Task OnInitializedAsync()
    {
        projects = await _db_p.GetProjects();
        if (taskId != null)
        {
            int id = Convert.ToInt32(taskId);

            var tasks = await _db.GetTasks();
            t = tasks.Find(t => t.ID == id);

            task.Name = t.Name;
            task.StartDate = t.StartDate;
            task.EndDate = t.EndDate;
        }
    }

    private class DisplayTask
    {
        [MaxLength(100)]
        [MinLength(1)]
        public string Name { get; set; }

        [Required]
        public DateTime EndDate = DateTime.Now;

        public DateTime StartDate = DateTime.Now;
    }
}
