@page "/tasks"
@using System.Text.Json
@using JUST.Models
@inject HttpClient Http

<div className='todo'>
    <h1>TASKS</h1>

        <input @bind="newItemName" placeholder="New Todo" />
        <button @onclick="@AddItem">Add</button>

        <div>
            <p>@TodoItem</p>
        </div>

    @*<div style={{width: 200}}>
        @GetTodosAsync()
        <ul>
            @foreach (var todo in AllTodos)
            {
                <li> @todo.Name </li>
            }
        </ul>*@
        

    @*</div>*@
</div>

@code {
    private List<TodoDto> AllTodos { get; set; }
    private TodoDto TodoItem { get; set; }

    private string newItemName;

    private async Task AddItem()
    {
        var addItem = new TodoDto { Name = newItemName };
        await Http.PostAsJsonAsync("http://localhost:8080/api/Todos", addItem);
    }

    protected async Task GetTodoAsync(int id)
    {
        var response = await Http.GetAsync("http://localhost:8080/api/Todos/1");
        var tasksJson = await response.Content.ReadAsStringAsync();

        TodoItem = JsonSerializer.Deserialize<TodoDto>(tasksJson, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        });
    }

    protected async Task GetTodosAsync()
    {
        var response = await Http.GetAsync("http://localhost:8080/api/Todos");
        var tasksJson = await response.Content.ReadAsStringAsync();

        AllTodos = JsonSerializer.Deserialize<List<TodoDto>>(tasksJson, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        });
    }
}
